{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Quarters\n\n\nWelcome to the Quarters documentation! Quarters is a universal cryptocurrency\nfor games. This document includes SDK, APIs and code snippets. With them, you\ncan easily integrate Quarters tokens to your games.\n\n\nIf you feel like contributing to the docs, like changing or adding things, feel\nfree to submit a \nPull Request\n at\n\nhttps://github.com/weiks/quarters-docs\n\n\nFor our website visit\n\nPocketful of Quarters\n.\n\n\nDevelopment tools and library\n\n\nHere is the list of tools and libraries quarters project provides to get\nstarted.\n\n\nQuarters contract\n\n\nQuarters contract is Ethereum smart contract and written in solidity. It\nincludes ERC20 token and withdraw functions. You can check code and ABI here on\netherscan.\n\n\nMainnet: \n[Yet to be deployed]\n\n\nRopsten:\n\n0x8c05ebef0b4419416e8efb4c26edb4aa6cd7bb27\n\n\nQuarters buttons\n\n\nQuarters buttons are small snippets. It is easy and fastest way to integrate\n\"Play with Quarters\" feature on game. Here is quick setup to embed buttons on\nany web based game to accept Quarters.\n\n\nscript\n\n    \nsrc\n=\nhttps://dev.pocketfulofquarters.com/embeds/button.js\n\n    \ndata-script-name\n=\nquarters-embeds\n\n    \ndata-app-id\n=\nAPP-ID\n\n    \ndata-app-key\n=\nAPP-KEY\n\n    \ncharset\n=\nutf-8\n\n\n/\nscript\n\n\n\nbutton\n\n    \nclass\n=\nbuy-quarters-button\n\n    \ndata-widget-type\n=\nbutton\n\n    \ndata-order-code\n=\n1\n\n    \ndata-amount\n=\n2\n\n  Play with 2 Quarters\n\n/\nbutton\n\n\n\n\n\n\nTo check complete documentation, \nvisit Quarters Buttons\n.\n\n\nJavascript SDK\n\n\nJavascript SDK provides rich API interface to help build oauth on Quarters.\nDevelopers can use \nQuarters oauth\n to add authentication to the game and\nretrieve information for client-only games.\n\n\n  npm install --save quarters-js\n\n\n\n\n\nTo check complete documentation, \nvisit Javascript SDK\n.\n\n\nNode SDK (for server)\n\n\nNode SDK provides helpers to interact with Quarters server and contract.\n\n\n  npm install --save node-quarters\n\n\n\n\n\nTo check complete documentation, \nvisit Node SDK\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#welcome-to-quarters", 
            "text": "Welcome to the Quarters documentation! Quarters is a universal cryptocurrency\nfor games. This document includes SDK, APIs and code snippets. With them, you\ncan easily integrate Quarters tokens to your games.  If you feel like contributing to the docs, like changing or adding things, feel\nfree to submit a  Pull Request  at https://github.com/weiks/quarters-docs  For our website visit Pocketful of Quarters .", 
            "title": "Welcome to Quarters"
        }, 
        {
            "location": "/#development-tools-and-library", 
            "text": "Here is the list of tools and libraries quarters project provides to get\nstarted.  Quarters contract  Quarters contract is Ethereum smart contract and written in solidity. It\nincludes ERC20 token and withdraw functions. You can check code and ABI here on\netherscan.  Mainnet:  [Yet to be deployed]  Ropsten: 0x8c05ebef0b4419416e8efb4c26edb4aa6cd7bb27  Quarters buttons  Quarters buttons are small snippets. It is easy and fastest way to integrate\n\"Play with Quarters\" feature on game. Here is quick setup to embed buttons on\nany web based game to accept Quarters.  script \n     src = https://dev.pocketfulofquarters.com/embeds/button.js \n     data-script-name = quarters-embeds \n     data-app-id = APP-ID \n     data-app-key = APP-KEY \n     charset = utf-8  / script  button \n     class = buy-quarters-button \n     data-widget-type = button \n     data-order-code = 1 \n     data-amount = 2 \n  Play with 2 Quarters / button   To check complete documentation,  visit Quarters Buttons .  Javascript SDK  Javascript SDK provides rich API interface to help build oauth on Quarters.\nDevelopers can use  Quarters oauth  to add authentication to the game and\nretrieve information for client-only games.    npm install --save quarters-js  To check complete documentation,  visit Javascript SDK .  Node SDK (for server)  Node SDK provides helpers to interact with Quarters server and contract.    npm install --save node-quarters  To check complete documentation,  visit Node SDK .", 
            "title": "Development tools and library"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting started\n\n\nOur API makes it easy to integrate Quarters into both new and existing game\napplications.\n\n\nQuarter's APIs enable a variety of capabilities; from simply gathering read-only\ndata, to building something that's never been done before\n\n\nCapabilities:\n\n\n\n\nCreate user account with Ethereum wallet and buy quarters\n\n\nRetrieve user account information, send transfer requests using oauth\n\n\nRetrieve historical price, tranche and supply information\n\n\nAccept and request quarters as a game developer\n\n\n\n\nWe offer a variety of client libraries and server SDKs.\n\n\nStart with your first app\n\n\nThere are two ways you can integrate Quarters in your game - Quarters buttons and using SDK. But to start with it, you will need to create app on Quarters platform. One can create multiple apps.\n\n\n\u00bb \nCreate your first App\n\n\nAPI key authentication\n\n\nFollow Quarters Developer channels for updates\n\n\nIf you can't find the answer to your question or need help, please explore and\ncontact us through our dev support channels.\n\n\nTo contact us about confidential or otherwise private information, email us at \ndev@pocketfulofquarters.com", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "Our API makes it easy to integrate Quarters into both new and existing game\napplications.  Quarter's APIs enable a variety of capabilities; from simply gathering read-only\ndata, to building something that's never been done before  Capabilities:   Create user account with Ethereum wallet and buy quarters  Retrieve user account information, send transfer requests using oauth  Retrieve historical price, tranche and supply information  Accept and request quarters as a game developer   We offer a variety of client libraries and server SDKs.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#start-with-your-first-app", 
            "text": "There are two ways you can integrate Quarters in your game - Quarters buttons and using SDK. But to start with it, you will need to create app on Quarters platform. One can create multiple apps.  \u00bb  Create your first App", 
            "title": "Start with your first app"
        }, 
        {
            "location": "/getting-started/#api-key-authentication", 
            "text": "", 
            "title": "API key authentication"
        }, 
        {
            "location": "/getting-started/#follow-quarters-developer-channels-for-updates", 
            "text": "If you can't find the answer to your question or need help, please explore and\ncontact us through our dev support channels.  To contact us about confidential or otherwise private information, email us at  dev@pocketfulofquarters.com", 
            "title": "Follow Quarters Developer channels for updates"
        }, 
        {
            "location": "/oauth/introduction/", 
            "text": "Quarters OAuth\n\n\n\n\nThe Quarters API allows developers to use the OAuth2 protocol to allow a Quarters user to grant a 3rd party application full or partial access to his/her account, without sharing the account's API key or login credentials. It is a slightly more complex integration than the API Key authentication method, but is more flexible. OAuth2 works well for web applications, as well as desktop and mobile apps.\n\n\n\u00bb Get started integrating Quarters OAuth to your application", 
            "title": "Introduction"
        }, 
        {
            "location": "/oauth/introduction/#quarters-oauth", 
            "text": "The Quarters API allows developers to use the OAuth2 protocol to allow a Quarters user to grant a 3rd party application full or partial access to his/her account, without sharing the account's API key or login credentials. It is a slightly more complex integration than the API Key authentication method, but is more flexible. OAuth2 works well for web applications, as well as desktop and mobile apps.  \u00bb Get started integrating Quarters OAuth to your application", 
            "title": "Quarters OAuth"
        }, 
        {
            "location": "/oauth/integrating/", 
            "text": "Integrating Quarters OAuth with your web game apps\n\n\nBefore integrating Quarters OAuth, you'll need to register a new OAuth2 application under \nyour profile\n. If you're using a previous OAuth2 implementation, you may need to configure the following settings:\n\n\n\n\nAuthorize URL\n: \nhttps://dev.pocketfulofquarters.com/oauth/authorize\n\n\nAccess Token URL\n: \nhttps://dev.pocketfulofquarters.com/oauth/token\n\n\n\n\n\n\nWarning\n\n\nQuarters is still in beta. API may change in stable version.\n\n\n\n\nTo integrate your third-party web server application with Quarters, use the following flow:\n\n\n1. Redirect users to request Quarters access\n\n\nGET https://dev.pocketfulofquarters.com/oauth/authorize?response_type=code\nclient_id=YOUR_CLIENT_ID\nredirect_uri=YOUR_REDIRECT_URL\ninline=true\n\n\n\n\n\nWhen redirecting a user to Quarters to authorize access to your application, you'll need to construct the authorization URL with the correct parameters. Here's a list of parameters you should always specify:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nresponse_type\n\n\nRequired\n Value \ncode\n\n\n\n\n\n\nclient_id\n\n\nRequired\n The client ID you received after registering your application.\n\n\n\n\n\n\ninline\n\n\nRequired\n Value \ntrue\n\n\n\n\n\n\nredirect_uri\n\n\nOptional\n The URL (encoded) in your app where users will be sent after authorization.\n\n\n\n\n\n\n\n\nExample of an authorization URL:\n\n\nGET https://dev.pocketfulofquarters.com/oauth/authorize?response_type=code\nclient_id=Lpk5sPrA7P59HFlN7obS\ninline=true\nredirect_uri=https%3A%2F%2Fexample.com%2Foauth%2Fcallback\n\n\n\n\n\n2. Quarters redirects back to your site\n\n\nIf the user approves your application, Quarters will redirect them back to your \nredirect_uri\n with a temporary code parameter.\n\n\nExample of the redirect:\n\n\nGET https://example.com/oauth/callback?success=true\ncode=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiNmFkODI2ZjAtZDY1ZS0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsInRva2VuVHlwZSI6Imp3dDphdXRob3JpemF0aW9uX2NvZGUiLCJpYXQiOjE1MTIxMDg2NjYsImV4cCI6MTUxMjEwODcyNn0.Pwl3Mt_RN5Qut5VpCshP32FkZ_lES84PrDnzIGDG8J0\n\n\n\n\n\nOAuth2 Redirect URI\n\n\nFor added security, all \nredirect_uri\n must use SSL (i.e. begin with \nhttps://\n). URIs without SSL can only be used for development and testing and will not be supported in production.\n\n\n3. Exchange code for an access token\n\n\nAfter you have received the temporary code, you can exchange it for valid access and refresh tokens. This can be done by making a \nPOST\n call:\n\n\nPOST https://api.dev.pocketfulofquarters/v1/oauth/token\n\n\n\n\n\nWith following parameters:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngrant_type\n\n\nRequired\n Value \nauthorization_code\n\n\n\n\n\n\ncode\n\n\nRequired\n Value from step 2\n\n\n\n\n\n\nclient_id\n\n\nRequired\n The app ID you received after registering your application\n\n\n\n\n\n\nclient_secret\n\n\nRequired\n The \nweb secret\n you received after registering your application\n\n\n\n\n\n\n\n\nExample request:\n\n\ncurl\n \nhttps\n://\napi\n.\ndev\n.\npocketfulofquarters\n.\ncom\n/\nv1\n/\noauth\n/\ntoken\n \n\\\n\n  \n-X\n \nPOST\n \n\\\n\n  \n-H\n \nContent-Type: application/json;charset=UTF-8\n \n\\\n\n  \n--data-binary\n \n{\nclient_id\n:\nLpk5sPrA7P59HFlN7obS\n,\nclient_secret\n:\n1s4x2v8h3b9ollw1pt2afj8knheamvmvv\n,\ngrant_type\n:\nauthorization_code\n,\ncode\n:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiMDgxMmMxNTAtZDY2NC0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsInRva2VuVHlwZSI6Imp3dDphdXRob3JpemF0aW9uX2NvZGUiLCJpYXQiOjE1MTIxMTEwNzcsImV4cCI6MTUxMjExMTEzN30.Jljjd7yjk-cr1uYSq0kSTwCpK8zNq8YGrVk_AQu6u4c\n}\n\n\n\n\n\n\nAfter a successful request, a valid access token will be returned in the response:\n\n\n{\n\n  \nclient_id\n:\nLpk5sPrA7P59HFlN7obS\n,\n\n  \nrefresh_token\n:\nd832e7c419869...5918b96\n,\n\n  \naccess_token\n:\neyJhbGciOiJIU...81plg\n\n\n}\n\n\n\n\n\n\n4. Make an API call\n\n\nAfter you have a valid access token, you can make your first API call:\n\n\ncurl https://api.dev.pocketfulofquarters.com/v1/me \\\n  -H \nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiMWE5Njk3YzAtZDY2NC0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsImFkbWluIjpmYWxzZSwiZGV2ZWxvcGVyIjpmYWxzZSwidG9rZW5UeXBlIjoiand0OnVzZXIiLCJpYXQiOjE1MTIxMTExMDgsImV4cCI6MTUxMjExMTcwOH0.PFlJjGoN3xza1Qk3ZIBaOzMPyYbrQvnjyvyvQf81plg\n\n\n\n\n\n\nExample response:\n\n\n{\n\n  \nid\n:\nvGiLGvwPDXTu3VyEBTrJcIu2a702\n,\n\n  \nuserId\n:\nvGiLGvwPDXTu3VyEBTrJcIu2a702\n,\n\n  \ndisplayName\n:\nUser1\n,\n\n  \nemail\n:\nuser1@example.com\n,\n\n  \nemailVerified\n:\ntrue\n\n\n}", 
            "title": "Integrating"
        }, 
        {
            "location": "/oauth/integrating/#integrating-quarters-oauth-with-your-web-game-apps", 
            "text": "Before integrating Quarters OAuth, you'll need to register a new OAuth2 application under  your profile . If you're using a previous OAuth2 implementation, you may need to configure the following settings:   Authorize URL :  https://dev.pocketfulofquarters.com/oauth/authorize  Access Token URL :  https://dev.pocketfulofquarters.com/oauth/token    Warning  Quarters is still in beta. API may change in stable version.   To integrate your third-party web server application with Quarters, use the following flow:", 
            "title": "Integrating Quarters OAuth with your web game apps"
        }, 
        {
            "location": "/oauth/integrating/#1-redirect-users-to-request-quarters-access", 
            "text": "GET https://dev.pocketfulofquarters.com/oauth/authorize?response_type=code client_id=YOUR_CLIENT_ID redirect_uri=YOUR_REDIRECT_URL inline=true  When redirecting a user to Quarters to authorize access to your application, you'll need to construct the authorization URL with the correct parameters. Here's a list of parameters you should always specify:     Parameter  Description      response_type  Required  Value  code    client_id  Required  The client ID you received after registering your application.    inline  Required  Value  true    redirect_uri  Optional  The URL (encoded) in your app where users will be sent after authorization.     Example of an authorization URL:  GET https://dev.pocketfulofquarters.com/oauth/authorize?response_type=code client_id=Lpk5sPrA7P59HFlN7obS inline=true redirect_uri=https%3A%2F%2Fexample.com%2Foauth%2Fcallback", 
            "title": "1. Redirect users to request Quarters access"
        }, 
        {
            "location": "/oauth/integrating/#2-quarters-redirects-back-to-your-site", 
            "text": "If the user approves your application, Quarters will redirect them back to your  redirect_uri  with a temporary code parameter.  Example of the redirect:  GET https://example.com/oauth/callback?success=true code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiNmFkODI2ZjAtZDY1ZS0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsInRva2VuVHlwZSI6Imp3dDphdXRob3JpemF0aW9uX2NvZGUiLCJpYXQiOjE1MTIxMDg2NjYsImV4cCI6MTUxMjEwODcyNn0.Pwl3Mt_RN5Qut5VpCshP32FkZ_lES84PrDnzIGDG8J0  OAuth2 Redirect URI  For added security, all  redirect_uri  must use SSL (i.e. begin with  https:// ). URIs without SSL can only be used for development and testing and will not be supported in production.", 
            "title": "2. Quarters redirects back to your site"
        }, 
        {
            "location": "/oauth/integrating/#3-exchange-code-for-an-access-token", 
            "text": "After you have received the temporary code, you can exchange it for valid access and refresh tokens. This can be done by making a  POST  call:  POST https://api.dev.pocketfulofquarters/v1/oauth/token  With following parameters:     Parameter  Description      grant_type  Required  Value  authorization_code    code  Required  Value from step 2    client_id  Required  The app ID you received after registering your application    client_secret  Required  The  web secret  you received after registering your application     Example request:  curl   https :// api . dev . pocketfulofquarters . com / v1 / oauth / token   \\ \n   -X   POST   \\ \n   -H   Content-Type: application/json;charset=UTF-8   \\ \n   --data-binary   { client_id : Lpk5sPrA7P59HFlN7obS , client_secret : 1s4x2v8h3b9ollw1pt2afj8knheamvmvv , grant_type : authorization_code , code : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiMDgxMmMxNTAtZDY2NC0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsInRva2VuVHlwZSI6Imp3dDphdXRob3JpemF0aW9uX2NvZGUiLCJpYXQiOjE1MTIxMTEwNzcsImV4cCI6MTUxMjExMTEzN30.Jljjd7yjk-cr1uYSq0kSTwCpK8zNq8YGrVk_AQu6u4c }   After a successful request, a valid access token will be returned in the response:  { \n   client_id : Lpk5sPrA7P59HFlN7obS , \n   refresh_token : d832e7c419869...5918b96 , \n   access_token : eyJhbGciOiJIU...81plg  }", 
            "title": "3. Exchange code for an access token"
        }, 
        {
            "location": "/oauth/integrating/#4-make-an-api-call", 
            "text": "After you have a valid access token, you can make your first API call:  curl https://api.dev.pocketfulofquarters.com/v1/me \\\n  -H  Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiMWE5Njk3YzAtZDY2NC0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsImFkbWluIjpmYWxzZSwiZGV2ZWxvcGVyIjpmYWxzZSwidG9rZW5UeXBlIjoiand0OnVzZXIiLCJpYXQiOjE1MTIxMTExMDgsImV4cCI6MTUxMjExMTcwOH0.PFlJjGoN3xza1Qk3ZIBaOzMPyYbrQvnjyvyvQf81plg   Example response:  { \n   id : vGiLGvwPDXTu3VyEBTrJcIu2a702 , \n   userId : vGiLGvwPDXTu3VyEBTrJcIu2a702 , \n   displayName : User1 , \n   email : user1@example.com , \n   emailVerified : true  }", 
            "title": "4. Make an API call"
        }, 
        {
            "location": "/oauth/refresh-tokens/", 
            "text": "Access tokens and Refresh tokens\n\n\nQuarters uses security feature of OAuth2 called refresh tokens. When you first authenticate, your app will be given an \naccess_token\n and a \nrefresh_token\n. The access token is used to authenticate all your requests, but expires in 10 minutes. Once an access token has expired, you will need to use the refresh token to obtain a new access token and a new refresh token. The refresh token never expires but it can only be exchanged once for a new set of access and refresh tokens. If you try to make a call with an expired access token, a 401 response will be returned.\n\n\nThis process adds some complexity for Quarters Connect integrations, but provides an valuable layer of security since a compromised access token is automatically revoked after 10 minutes.\n\n\nTo get a new access token, you'll need to do a POST request to \n/oauth/token\n just like before, but this time you must include your \nrefresh_token\n and change the \ngrant_type\n to \nrefresh_token\n.\n\n\ncurl https://api.dev.pocketfulofquarters.com/v1/oauth/token \\\n  -X POST \\\n  -d \ngrant_type=refresh_token\n\n      client_id=YOUR_APP_ID\n\n      client_secret=YOUR_WEB_SECRET\n\n      refresh_token=REFRESH_TOKEN\n\n\n\n\n\n\nThe expected result is a response containing the access token, as before:\n\n\n{\n\n  \nclient_id\n:\n \n...\n,\n\n  \naccess_token\n:\n \n...\n,\n\n  \nrefresh_token\n:\n \n...\n\n\n}\n\n\n\n\n\n\nNote: If you are using an OAuth2 library that supports refresh tokens, you\u2019re in luck - the library will automatically take care of these details.", 
            "title": "Refresh tokens"
        }, 
        {
            "location": "/oauth/refresh-tokens/#access-tokens-and-refresh-tokens", 
            "text": "Quarters uses security feature of OAuth2 called refresh tokens. When you first authenticate, your app will be given an  access_token  and a  refresh_token . The access token is used to authenticate all your requests, but expires in 10 minutes. Once an access token has expired, you will need to use the refresh token to obtain a new access token and a new refresh token. The refresh token never expires but it can only be exchanged once for a new set of access and refresh tokens. If you try to make a call with an expired access token, a 401 response will be returned.  This process adds some complexity for Quarters Connect integrations, but provides an valuable layer of security since a compromised access token is automatically revoked after 10 minutes.  To get a new access token, you'll need to do a POST request to  /oauth/token  just like before, but this time you must include your  refresh_token  and change the  grant_type  to  refresh_token .  curl https://api.dev.pocketfulofquarters.com/v1/oauth/token \\\n  -X POST \\\n  -d  grant_type=refresh_token \n      client_id=YOUR_APP_ID \n      client_secret=YOUR_WEB_SECRET \n      refresh_token=REFRESH_TOKEN   The expected result is a response containing the access token, as before:  { \n   client_id :   ... , \n   access_token :   ... , \n   refresh_token :   ...  }   Note: If you are using an OAuth2 library that supports refresh tokens, you\u2019re in luck - the library will automatically take care of these details.", 
            "title": "Access tokens and Refresh tokens"
        }, 
        {
            "location": "/quarters-buttons/", 
            "text": "Quarters Buttons\n\n\nIntegrate Quarters on your website in an embedded window\n\n\nSample Button\n\n\n\n\n\n\n  Play with quarters\n\n\n\n\n\n\nSample code\n\n\nWhen you create an quarters button, it will give you code like this example.\n\n\nbutton\n\n  \nclass\n=\nbuy-quarters-button\n\n  \ndata-widget-type\n=\nbutton\n\n  \ndata-order-name\n=\nSample docs\n\n  \ndata-order-description\n=\nSample quarters transfer\n\n  \ndata-order-code\n=\n1\n\n  \ndata-amount\n=\n5\n\n  \ndata-button-size\n=\nmedium\n\n  \ndata-button-type\n=\nblack\n\n  Play with quarters\n\n/\nbutton\n\n\n\nscript\n \nsrc\n=\nhttps://dev.pocketfulofquarters.com/embeds/button.js\n\n    \ndata-script-name\n=\nquarters-embeds\n\n    \ndata-app-id\n=\nKAYR7bXS3116XyV9vs6u\n\n    \ndata-app-key\n=\nqg05u8p50lof20z9y6b1jb6kf4hcfbdl\n\n    \ncharset\n=\nutf-8\n/\nscript\n\n\n\n\n\n\nHow to create Quarters Button\n\n\nQuarters buttons can be generated via our button generator (shown below) once you create \nyour first app\n\n\nThe button generator is the easiest way to get started.\n\n\n\n\nThis will create code like this.\n\n\n\n\nThe only required parameters amount. The rest can be set when you create the button or later via the \ndata-*\n attributes in the embed HTML. \ndata-*\n attributes will override any attributes you set in the button generator.\n\n\nOnce a button is generated, you'll be given a few lines of HTML code to copy and paste into your website. This will add the button to your page.\n\n\nButtons can be thought of as disposable (they are just a way to hard code a name and price into a code attribute) so if you mess up you can always start over with a new button.\n\n\nIntegration Details\n\n\nA separate \nrequestId\n is generated for each order and user. If a user is already signed in to a Quarters account, they can complete the checkout in two clicks - this is the fastest method of transfer.\n\n\nOnce a transfers completes, a \nonQuartersCallback\n window function will be fired along with a code param referencing the same button.\n\n\n// Get quarters button callback\n\n\nwndow\n.\nonQuartersCallback\n \n=\n \nfunction\n(\ndata\n)\n \n{\n\n  \nif\n \n(\ndata\n.\nerror\n)\n \n{\n\n    \n// data.message\n\n  \n}\n \nelse\n \nif\n \n(\ndata\n.\ncancel\n)\n \n{\n\n    \n// user canceled transfer\n\n  \n}\n \nelse\n \n{\n\n    \n// data.txId =\n Ethereum transaction tx id\n\n    \n// data.requestId =\n Request Id to get details about order (/v1/requests/:requestId)\n\n    \n// data.order_code =\n reference to button `data-order-code`\n\n  \n}\n\n\n}\n\n\n\n\n\n\nOn successful transfer, following param will be generated:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntxId\n\n\nEthereum transaction hash which you can use to validate confirmed transaction on blockchain\n\n\n\n\n\n\nrequestId\n\n\nOrder id which you can use to retrieve order details. \nOrder details can be fetched using \nclient_secret\n (server key) using \nNode SDK\n \nAPI: \n/v1/requests/:requestId\n\n\n\n\n\n\norder_code\n\n\nOrder code. Same as code supplied using \ndata-order-code\n. \nUsed when multiple buttons are there on a page to identify order.\n\n\n\n\n\n\n\n\nAdvanced Options\n\n\nCustomizing the Embed HTML\n\n\nThe embed html consists of one script tag referencing \nhttps://dev.pocketfulofquarters.com/embeds/button.js\n and an element with class \nbuy-quarters-button\n with \ndata-widget-type='button'\n.\n\n\nYou can have one or more elements with class \nbuy-quarters-button\n on the page (if you\u2019re including multiple buttons), but only one script tag is ever needed.\n\n\nAfter adding the \nbuy-quarters-button\n class, the only required parameters are \ndata-amount\n and \ndata-widget-type\n. The other params can be updated after the button is created by setting \ndata-*\n attributes on the element. This makes it easy to update fields without having to create a new button.\n\n\nThe div can have the following params:\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata-amount\n\n\nRequired\n Integer amount of quarters for order.\n\n\n\n\n\n\ndata-button-size\n\n\nOptional\n one of \nmedium\n, \nlarge\n or \nsmall\n. \nThese different button styles can be previewed in the button generator. \nDefault is \nmedium\n.\n\n\n\n\n\n\ndata-button-type\n\n\nOptional\n one of \nblack\n, \ngreen\n, 'red' or \ngrey\n. \nThese different button types can be previewed in the button generator. \nDefault is \nblack\n.\n\n\n\n\n\n\ndata-order-name\n\n\nOptional\n Order name which be shown to user\n\n\n\n\n\n\ndata-order-code\n\n\nOptional\n Unique code per page. \nIt will be used to identify multiple orders on same page.", 
            "title": "Quarters buttons"
        }, 
        {
            "location": "/quarters-buttons/#quarters-buttons", 
            "text": "", 
            "title": "Quarters Buttons"
        }, 
        {
            "location": "/quarters-buttons/#integrate-quarters-on-your-website-in-an-embedded-window", 
            "text": "Sample Button   \n  Play with quarters   Sample code  When you create an quarters button, it will give you code like this example.  button \n   class = buy-quarters-button \n   data-widget-type = button \n   data-order-name = Sample docs \n   data-order-description = Sample quarters transfer \n   data-order-code = 1 \n   data-amount = 5 \n   data-button-size = medium \n   data-button-type = black \n  Play with quarters / button  script   src = https://dev.pocketfulofquarters.com/embeds/button.js \n     data-script-name = quarters-embeds \n     data-app-id = KAYR7bXS3116XyV9vs6u \n     data-app-key = qg05u8p50lof20z9y6b1jb6kf4hcfbdl \n     charset = utf-8 / script", 
            "title": "Integrate Quarters on your website in an embedded window"
        }, 
        {
            "location": "/quarters-buttons/#how-to-create-quarters-button", 
            "text": "Quarters buttons can be generated via our button generator (shown below) once you create  your first app  The button generator is the easiest way to get started.   This will create code like this.   The only required parameters amount. The rest can be set when you create the button or later via the  data-*  attributes in the embed HTML.  data-*  attributes will override any attributes you set in the button generator.  Once a button is generated, you'll be given a few lines of HTML code to copy and paste into your website. This will add the button to your page.  Buttons can be thought of as disposable (they are just a way to hard code a name and price into a code attribute) so if you mess up you can always start over with a new button.", 
            "title": "How to create Quarters Button"
        }, 
        {
            "location": "/quarters-buttons/#integration-details", 
            "text": "A separate  requestId  is generated for each order and user. If a user is already signed in to a Quarters account, they can complete the checkout in two clicks - this is the fastest method of transfer.  Once a transfers completes, a  onQuartersCallback  window function will be fired along with a code param referencing the same button.  // Get quarters button callback  wndow . onQuartersCallback   =   function ( data )   { \n   if   ( data . error )   { \n     // data.message \n   }   else   if   ( data . cancel )   { \n     // user canceled transfer \n   }   else   { \n     // data.txId =  Ethereum transaction tx id \n     // data.requestId =  Request Id to get details about order (/v1/requests/:requestId) \n     // data.order_code =  reference to button `data-order-code` \n   }  }   On successful transfer, following param will be generated:     Parameter  Description      txId  Ethereum transaction hash which you can use to validate confirmed transaction on blockchain    requestId  Order id which you can use to retrieve order details.  Order details can be fetched using  client_secret  (server key) using  Node SDK   API:  /v1/requests/:requestId    order_code  Order code. Same as code supplied using  data-order-code .  Used when multiple buttons are there on a page to identify order.", 
            "title": "Integration Details"
        }, 
        {
            "location": "/quarters-buttons/#advanced-options", 
            "text": "", 
            "title": "Advanced Options"
        }, 
        {
            "location": "/quarters-buttons/#customizing-the-embed-html", 
            "text": "The embed html consists of one script tag referencing  https://dev.pocketfulofquarters.com/embeds/button.js  and an element with class  buy-quarters-button  with  data-widget-type='button' .  You can have one or more elements with class  buy-quarters-button  on the page (if you\u2019re including multiple buttons), but only one script tag is ever needed.  After adding the  buy-quarters-button  class, the only required parameters are  data-amount  and  data-widget-type . The other params can be updated after the button is created by setting  data-*  attributes on the element. This makes it easy to update fields without having to create a new button.  The div can have the following params:     Field  Description      data-amount  Required  Integer amount of quarters for order.    data-button-size  Optional  one of  medium ,  large  or  small .  These different button styles can be previewed in the button generator.  Default is  medium .    data-button-type  Optional  one of  black ,  green , 'red' or  grey .  These different button types can be previewed in the button generator.  Default is  black .    data-order-name  Optional  Order name which be shown to user    data-order-code  Optional  Unique code per page.  It will be used to identify multiple orders on same page.", 
            "title": "Customizing the Embed HTML"
        }, 
        {
            "location": "/sdk/js/", 
            "text": "Javascript SDK\n\n\nJavascript SDK provides helpers for Quarters APIs and OAuth2. It requires\n\nappId\n (\nclient_id\n) and \napp_web_secret\n.\n\n\nThe first thing you'll need to do is sign up for \nQuarters\n to \ncreate app\n\n\n\n\nWarning\n\n\nDo not use \napp_secret\n (Server API Key). Anyone can see parameters\npassed to Javascript SDK as it will be used on browser.\n\n\n\n\nFeatures\n\n\n\n\nSupport for both API Key + Secret and OAuth 2 authentication.\n\n\nConvenient methods for making calls to the API.\n\n\nAutomatic parsing of API responses into relevant Javascript objects.\n\n\n\n\nInstallation\n\n\nscript\n \nsrc\n=\nhttps://raw.githubusercontent.com/weiks/quarters-js/master/lib/Quarters.min.js\n/\nscript\n\n\n\n\n\n\nUsing npm\n\n\nnpm install --save quarters-js\n\n\n# Quarters = require(\nQuarters\n)\n\n\n\n\n\n\nGet started\n\n\nCreate client using \napp_id\n and \napp_web_secret\n.\n\n\nvar\n \nclient\n \n=\n \nnew\n \nQuarters\n({\n\n  \nappKey\n:\n \nAPP_ID\n,\n\n  \nappSecret\n:\n \nAPP_WEB_SECRET\n,\n\n  \nquartersURL\n:\n \nhttps://dev.pocketfulofquarters.com\n,\n\n  \napiURL\n:\n \nhttps://api.dev.pocketfulofquarters.com/v1/\n\n\n});\n\n\n\n\n\n\nOAuth APIs\n\n\nIf you're writing code that will act on behalf of another user, start by creating a new OAuth2 application. You will need to do some work to obtain OAuth credentials for your users; please refer to our \nOAuth 2 tutorial and documentation\n.\n\n\nAuthorize user through Quarters.\n\n\nclient\n.\nauthorize\n(\niframe\n,\n \nfunction\n(\ndata\n)\n \n{\n\n  \n// data.code =\n temporary auth code\n\n\n});\n\n\n\n\n\n\nIf you have \ncode\n through \nauthorize\n, you can get \nrefresh_token\n and \naccess_token\n using \nsetAuthCode\n method. This method also set \nrefresh_token\n in \nclient\n\n\nclient\n.\nsetAuthCode\n(\ncode\n).\nthen\n(\nfunction\n(\ndata\n)\n \n{\n\n  \n// data.refresh_token =\n refresh token for client\n\n  \n// data.access_token =\n access token for subsequent APIs calls\n\n\n  \n// ...\n\n  \n// ....\n\n  \n// start making API calls\n\n\n});\n\n\n\n\n\n\n\n\nWarning\n\n\nSetting \ncode\n directly through SDK without validating at server is not safe. Use this method only for web-only applications. For server based applications, use server (Node SDK or APIs) to validate and get \nrefresh_token\n and \naccess_token\n from quarters server. Then, use \nsetRefreshToken\n to set \nrefresh_token\n to quarters client object.\n\n\n\n\nAPIs\n\n\nSet refresh token\n\n\nIf you already have \nrefresh_token\n, you can skip \nauthorize\n and \nsetAuthCode\n, and set refresh token to client by calling \nsetRefreshToken\n.\n\n\nclient\n.\nsetRefreshToken\n(\nrefreshToken\n).\nthen\n(\nfunction\n()\n \n{\n\n  \n// ...\n\n  \n// ....\n\n  \n// start making API calls\n\n\n});\n\n\n\n\n\n\nUser details\n\n\nOnce you have set \nrefresh_token\n using \nsetAuthCode\n or \nsetRefreshToken\n, you can fetch user details and user related other informations.\n\n\nclient\n.\nme\n().\nthen\n(\nfunction\n(\nuser\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nuser\n);\n\n\n});\n\n\n\n\n\n\nTransfer request\n\n\nWhen you want user to transfer quarters while playing game. You can create \"transfer request\"; it creates new \nrequestId\n and then, you can ask user to authorize the transfer.\n\n\nclient\n.\nrequestTransfer\n({\n\n  \ntokens\n:\n \n10\n,\n \n// 10 quarters\n\n  \ndescription\n:\n \nPower ups\n \n// transfer description\n\n\n}).\nthen\n(\nfunction\n(\nrequest\n)\n \n{\n\n\n  \n// request related details\n\n  \nconsole\n.\nlog\n(\nrequest\n);\n\n\n  \n// add iframe on the page and ask user to authorize transfer\n\n  \nclient\n.\nauthorizeTransfer\n(\nrequest\n.\nid\n,\n \niframe\n,\n \nfunction\n(\ndata\n)\n \n{\n\n    \nif\n \n(\ndata\n.\nerror\n)\n \n{\n\n      \n// data.message\n\n    \n}\n \nelse\n \nif\n \n(\ndata\n.\ncancel\n)\n \n{\n\n      \n// user canceled transfer\n\n    \n}\n \nelse\n \n{\n\n      \n// data.txId =\n Ethereum transaction tx id\n\n      \n// data.requestId =\n Request Id to get details about order (/v1/requests/:requestId)\n\n    \n}\n\n  \n});\n\n\n});\n\n\n\n\n\n\n\n\nInfo\n\n\nYou can use \nQuarters Buttons\n to get \ntxId\n and \nrequestId\n without creating \nrequestTransfer\n and \nauthorizeTransfer\n. In much complex apps, this might comes handy.\n\n\n\n\nExamples\n\n\nweb-only app\n\n\nvar\n \nclient\n \n=\n \nnew\n \nQuarters\n({\n\n  \nappKey\n:\n \nAPP_ID\n,\n\n  \nappSecret\n:\n \nAPP_WEB_SECRET\n,\n\n  \nquartersURL\n:\n \nhttps://dev.pocketfulofquarters.com\n,\n\n  \napiURL\n:\n \nhttps://api.dev.pocketfulofquarters.com/v1/\n\n\n});\n\n\n\nclient\n.\nauthorize\n(\niframe\n,\n \nfunction\n(\ndata\n)\n \n{\n\n  \nif\n \n(\ndata\n.\nerror\n)\n \n{\n\n    \n// show alert (data.message contains error message)\n\n  \n}\n \nelse\n \nif\n \n(\ndata\n.\ncode\n)\n \n{\n\n    \nclient\n.\nsetAuthCode\n(\ncode\n).\nthen\n(\nfunction\n()\n \n{\n\n      \n// Get refresh token and store into local storage/cookie (optional)\n\n      \nvar\n \nrefreshToken\n \n=\n \nclient\n.\ngetRefreshToken\n();\n\n      \nwindow\n.\nlocalStorage\n.\nsetItem\n(\nquarters-refresh-token\n,\n \nrefreshToken\n);\n\n\n      \n// ...\n\n      \n// fetch user details\n\n      \n// ...\n\n    \n});\n\n  \n}\n\n\n});\n\n\n\n// if you have refresh token already in storage or cookie\n\n\nvar\n \nrefreshToken\n \n=\n \nwindow\n.\nlocalStorage\n.\ngetItem\n();\n\n\nif\n \n(\nrefreshToken\n)\n \n{\n\n  \nclient\n.\nsetRefreshToken\n(\nrefreshToken\n).\nthen\n(\nfunction\n()\n \n{\n\n    \n// ...\n\n    \n// fetch user details\n\n    \n// ...\n\n  \n});\n\n\n}", 
            "title": "Javascript (client)"
        }, 
        {
            "location": "/sdk/js/#javascript-sdk", 
            "text": "Javascript SDK provides helpers for Quarters APIs and OAuth2. It requires appId  ( client_id ) and  app_web_secret .  The first thing you'll need to do is sign up for  Quarters  to  create app   Warning  Do not use  app_secret  (Server API Key). Anyone can see parameters\npassed to Javascript SDK as it will be used on browser.", 
            "title": "Javascript SDK"
        }, 
        {
            "location": "/sdk/js/#features", 
            "text": "Support for both API Key + Secret and OAuth 2 authentication.  Convenient methods for making calls to the API.  Automatic parsing of API responses into relevant Javascript objects.", 
            "title": "Features"
        }, 
        {
            "location": "/sdk/js/#installation", 
            "text": "script   src = https://raw.githubusercontent.com/weiks/quarters-js/master/lib/Quarters.min.js / script   Using npm  npm install --save quarters-js # Quarters = require( Quarters )", 
            "title": "Installation"
        }, 
        {
            "location": "/sdk/js/#get-started", 
            "text": "Create client using  app_id  and  app_web_secret .  var   client   =   new   Quarters ({ \n   appKey :   APP_ID , \n   appSecret :   APP_WEB_SECRET , \n   quartersURL :   https://dev.pocketfulofquarters.com , \n   apiURL :   https://api.dev.pocketfulofquarters.com/v1/  });", 
            "title": "Get started"
        }, 
        {
            "location": "/sdk/js/#oauth-apis", 
            "text": "If you're writing code that will act on behalf of another user, start by creating a new OAuth2 application. You will need to do some work to obtain OAuth credentials for your users; please refer to our  OAuth 2 tutorial and documentation .  Authorize user through Quarters.  client . authorize ( iframe ,   function ( data )   { \n   // data.code =  temporary auth code  });   If you have  code  through  authorize , you can get  refresh_token  and  access_token  using  setAuthCode  method. This method also set  refresh_token  in  client  client . setAuthCode ( code ). then ( function ( data )   { \n   // data.refresh_token =  refresh token for client \n   // data.access_token =  access token for subsequent APIs calls \n\n   // ... \n   // .... \n   // start making API calls  });    Warning  Setting  code  directly through SDK without validating at server is not safe. Use this method only for web-only applications. For server based applications, use server (Node SDK or APIs) to validate and get  refresh_token  and  access_token  from quarters server. Then, use  setRefreshToken  to set  refresh_token  to quarters client object.", 
            "title": "OAuth APIs"
        }, 
        {
            "location": "/sdk/js/#apis", 
            "text": "", 
            "title": "APIs"
        }, 
        {
            "location": "/sdk/js/#set-refresh-token", 
            "text": "If you already have  refresh_token , you can skip  authorize  and  setAuthCode , and set refresh token to client by calling  setRefreshToken .  client . setRefreshToken ( refreshToken ). then ( function ()   { \n   // ... \n   // .... \n   // start making API calls  });", 
            "title": "Set refresh token"
        }, 
        {
            "location": "/sdk/js/#user-details", 
            "text": "Once you have set  refresh_token  using  setAuthCode  or  setRefreshToken , you can fetch user details and user related other informations.  client . me (). then ( function ( user )   { \n   console . log ( user );  });", 
            "title": "User details"
        }, 
        {
            "location": "/sdk/js/#transfer-request", 
            "text": "When you want user to transfer quarters while playing game. You can create \"transfer request\"; it creates new  requestId  and then, you can ask user to authorize the transfer.  client . requestTransfer ({ \n   tokens :   10 ,   // 10 quarters \n   description :   Power ups   // transfer description  }). then ( function ( request )   { \n\n   // request related details \n   console . log ( request ); \n\n   // add iframe on the page and ask user to authorize transfer \n   client . authorizeTransfer ( request . id ,   iframe ,   function ( data )   { \n     if   ( data . error )   { \n       // data.message \n     }   else   if   ( data . cancel )   { \n       // user canceled transfer \n     }   else   { \n       // data.txId =  Ethereum transaction tx id \n       // data.requestId =  Request Id to get details about order (/v1/requests/:requestId) \n     } \n   });  });    Info  You can use  Quarters Buttons  to get  txId  and  requestId  without creating  requestTransfer  and  authorizeTransfer . In much complex apps, this might comes handy.", 
            "title": "Transfer request"
        }, 
        {
            "location": "/sdk/js/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/sdk/js/#web-only-app", 
            "text": "var   client   =   new   Quarters ({ \n   appKey :   APP_ID , \n   appSecret :   APP_WEB_SECRET , \n   quartersURL :   https://dev.pocketfulofquarters.com , \n   apiURL :   https://api.dev.pocketfulofquarters.com/v1/  });  client . authorize ( iframe ,   function ( data )   { \n   if   ( data . error )   { \n     // show alert (data.message contains error message) \n   }   else   if   ( data . code )   { \n     client . setAuthCode ( code ). then ( function ()   { \n       // Get refresh token and store into local storage/cookie (optional) \n       var   refreshToken   =   client . getRefreshToken (); \n       window . localStorage . setItem ( quarters-refresh-token ,   refreshToken ); \n\n       // ... \n       // fetch user details \n       // ... \n     }); \n   }  });  // if you have refresh token already in storage or cookie  var   refreshToken   =   window . localStorage . getItem ();  if   ( refreshToken )   { \n   client . setRefreshToken ( refreshToken ). then ( function ()   { \n     // ... \n     // fetch user details \n     // ... \n   });  }", 
            "title": "web-only app"
        }, 
        {
            "location": "/sdk/node/", 
            "text": "Node SDK\n\n\nSupport for both API Key + Secret and OAuth2 authentication\n\n\nInstallation\n\n\nGet started", 
            "title": "Node (server)"
        }, 
        {
            "location": "/sdk/node/#node-sdk", 
            "text": "Support for both API Key + Secret and OAuth2 authentication", 
            "title": "Node SDK"
        }, 
        {
            "location": "/sdk/node/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/sdk/node/#get-started", 
            "text": "", 
            "title": "Get started"
        }, 
        {
            "location": "/guides/create-app/", 
            "text": "Create App\n\n\nIn this short guide, you'll learn how to create app, how to retrieve app information.\n\n\nTo create new app, visit \ncreate new app\n. You will be greeted following screen:\n\n\n\n\nApp name, description, url and image is required to publish app. This info will be shown to users while authorizing quarters transfer or during OAuth.\n\n\nOnce you enter all the information needed and click \"create new app\", you will be greeted with following app details screen with app id (\nclient_id\n), app web secret (\nclient_web_secret\n) and app secret (\nclient_secret\n).", 
            "title": "Create App"
        }, 
        {
            "location": "/guides/create-app/#create-app", 
            "text": "In this short guide, you'll learn how to create app, how to retrieve app information.  To create new app, visit  create new app . You will be greeted following screen:   App name, description, url and image is required to publish app. This info will be shown to users while authorizing quarters transfer or during OAuth.  Once you enter all the information needed and click \"create new app\", you will be greeted with following app details screen with app id ( client_id ), app web secret ( client_web_secret ) and app secret ( client_secret ).", 
            "title": "Create App"
        }, 
        {
            "location": "/guides/create-app/", 
            "text": "Create App\n\n\nIn this short guide, you'll learn how to create app, how to retrieve app information.\n\n\nTo create new app, visit \ncreate new app\n. You will be greeted following screen:\n\n\n\n\nApp name, description, url and image is required to publish app. This info will be shown to users while authorizing quarters transfer or during OAuth.\n\n\nOnce you enter all the information needed and click \"create new app\", you will be greeted with following app details screen with app id (\nclient_id\n), app web secret (\nclient_web_secret\n) and app secret (\nclient_secret\n).", 
            "title": "Embed quarters button"
        }, 
        {
            "location": "/guides/create-app/#create-app", 
            "text": "In this short guide, you'll learn how to create app, how to retrieve app information.  To create new app, visit  create new app . You will be greeted following screen:   App name, description, url and image is required to publish app. This info will be shown to users while authorizing quarters transfer or during OAuth.  Once you enter all the information needed and click \"create new app\", you will be greeted with following app details screen with app id ( client_id ), app web secret ( client_web_secret ) and app secret ( client_secret ).", 
            "title": "Create App"
        }, 
        {
            "location": "/guides/create-app/", 
            "text": "Create App\n\n\nIn this short guide, you'll learn how to create app, how to retrieve app information.\n\n\nTo create new app, visit \ncreate new app\n. You will be greeted following screen:\n\n\n\n\nApp name, description, url and image is required to publish app. This info will be shown to users while authorizing quarters transfer or during OAuth.\n\n\nOnce you enter all the information needed and click \"create new app\", you will be greeted with following app details screen with app id (\nclient_id\n), app web secret (\nclient_web_secret\n) and app secret (\nclient_secret\n).", 
            "title": "Login with Quarters (oauth v2)"
        }, 
        {
            "location": "/guides/create-app/#create-app", 
            "text": "In this short guide, you'll learn how to create app, how to retrieve app information.  To create new app, visit  create new app . You will be greeted following screen:   App name, description, url and image is required to publish app. This info will be shown to users while authorizing quarters transfer or during OAuth.  Once you enter all the information needed and click \"create new app\", you will be greeted with following app details screen with app id ( client_id ), app web secret ( client_web_secret ) and app secret ( client_secret ).", 
            "title": "Create App"
        }, 
        {
            "location": "/guides/create-app/", 
            "text": "Create App\n\n\nIn this short guide, you'll learn how to create app, how to retrieve app information.\n\n\nTo create new app, visit \ncreate new app\n. You will be greeted following screen:\n\n\n\n\nApp name, description, url and image is required to publish app. This info will be shown to users while authorizing quarters transfer or during OAuth.\n\n\nOnce you enter all the information needed and click \"create new app\", you will be greeted with following app details screen with app id (\nclient_id\n), app web secret (\nclient_web_secret\n) and app secret (\nclient_secret\n).", 
            "title": "Transfer quarters"
        }, 
        {
            "location": "/guides/create-app/#create-app", 
            "text": "In this short guide, you'll learn how to create app, how to retrieve app information.  To create new app, visit  create new app . You will be greeted following screen:   App name, description, url and image is required to publish app. This info will be shown to users while authorizing quarters transfer or during OAuth.  Once you enter all the information needed and click \"create new app\", you will be greeted with following app details screen with app id ( client_id ), app web secret ( client_web_secret ) and app secret ( client_secret ).", 
            "title": "Create App"
        }
    ]
}